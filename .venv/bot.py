from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import asyncio
import json
import os

# –¢–æ–∫–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
API_TOKEN = "7691260198:AAEGzqqiAJjUqNwBf440cwe9DxkdzcPcYXI"
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def check_file_exists():
    if not os.path.exists("tasks.json"):
        with open("tasks.json", "w") as file:
            json.dump({}, file, indent=4)


def load_tasks():
    check_file_exists()
    try:
        with open("tasks.json", "r") as file:
            data = json.load(file)
            return data if isinstance(data, dict) else {}
    except json.JSONDecodeError:
        return {}

def save_tasks():
    with open("tasks.json", "w") as file:
        json.dump(user_tasks, file, indent=4)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–¥–∞—á
user_tasks = {}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TaskStates(StatesGroup):
    waiting_for_task = State()
    waiting_for_task_number = State()

# –°–æ–∑–¥–∞–µ–º –∑–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="–ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    global user_tasks
    user_tasks = load_tasks()
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø —Ç–≤–æ–π Task Manager –ë–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",
        reply_markup=main_menu
    )

# –ó–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_command(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.waiting_for_task)

@dp.message(TaskStates.waiting_for_task)
async def process_task_text(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    task = message.text.strip()
    if not task:
        await message.reply("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    if user_id not in user_tasks:
        user_tasks[user_id] = []
    user_tasks[user_id].append(task)
    save_tasks()
    await message.reply(f"–ó–∞–¥–∞—á–∞ '{task}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
    await state.clear()

# –ó–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@dp.message(lambda msg: msg.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def list_command(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in user_tasks or not user_tasks[user_id]:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        tasks = "\n".join([f"üìå {i + 1}. {task}" for i, task in enumerate(user_tasks[user_id])])
        await message.reply(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks}")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ø–æ–º–æ—â—å"
@dp.message(lambda msg: msg.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    await message.reply(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:\n"
        "1 –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "2 –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "3 –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "4 –ü–æ–º–æ—â—å"
    )

# –ó–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(lambda msg: msg.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_command(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if user_id not in user_tasks or not user_tasks[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    tasks = "\n".join([f"{i + 1}. {task}" for i, task in enumerate(user_tasks[user_id])])
    await message.reply(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(TaskStates.waiting_for_task_number)

@dp.message(TaskStates.waiting_for_task_number)
async def process_task_number(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    try:
        task_number = int(message.text) - 1
        if task_number < 0 or task_number >= len(user_tasks[user_id]):
            raise ValueError
        removed_task = user_tasks[user_id].pop(task_number)
        await message.reply(f"–ó–∞–¥–∞—á–∞ '{removed_task}' —É–¥–∞–ª–µ–Ω–∞!", reply_markup=main_menu)
        save_tasks()
        await state.clear()
    except (ValueError, IndexError):
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message()
async def echo(message: Message):
    print(f"[{datetime.now()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id}): {message.text}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global user_tasks
    user_tasks = load_tasks()
    dp.message.register(start_command, Command("start"))
    dp.message.register(add_command, lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    dp.message.register(list_command, lambda msg: msg.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    dp.message.register(delete_command, lambda msg: msg.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    dp.message.register(process_task_text, TaskStates.waiting_for_task)
    dp.message.register(process_task_number, TaskStates.waiting_for_task_number)
    dp.message.register(echo)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"Loaded tasks: {user_tasks}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())