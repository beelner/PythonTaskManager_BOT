from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import BaseMiddleware
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime

API_TOKEN = "7691260198:AAEGzqqiAJjUqNwBf440cwe9DxkdzcPcYXI"
user_tasks = {}
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

test333 = "github"



class TaskStates(StatesGroup):
    waiting_for_task = State()
    waiting_for_task_number = State()



@dp.errors()
async def global_error_handler(update, exception):
    print(f"–û—à–∏–±–∫–∞: {exception}")
    if isinstance(exception, TelegramAPIError):
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Telegram API")
    return True  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É

class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, Message):
            user_id = event.from_user.id
            user_name = event.from_user.full_name
            message_text = event.text
            print(f"[{datetime.now()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {message_text}")
        return await handler(event, data)


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø —Ç–≤–æ–π Task Manager –ë–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1Ô∏è‚É£ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.\n"
        "2Ô∏è‚É£ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á.\n"
        "3Ô∏è‚É£ /delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.\n"
        "4Ô∏è‚É£ /help - –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.\n\n"
        "–ù–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?"
    )

@dp.message(Command("list"))
async def list_command(message: Message):
    user_id = message.from_user.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        tasks = "\n".join([f"üìå {i + 1}. {task}" for i, task in enumerate(user_tasks[user_id])])
        await message.reply(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks}")

@dp.message(Command("add"))
async def add_command(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.waiting_for_task)

@dp.message(TaskStates.waiting_for_task)
async def process_task_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    task = message.text.strip()
    if not task:
        await message.reply("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    if user_id not in user_tasks:
        user_tasks[user_id] = []
    user_tasks[user_id].append(task)
    await message.reply(f"–ó–∞–¥–∞—á–∞ '{task}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@dp.message(Command("delete"))
async def delete_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    tasks = "\n".join([f"{i + 1}. {task}" for i, task in enumerate(user_tasks[user_id])])
    await message.reply(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(TaskStates.waiting_for_task_number)

@dp.message(TaskStates.waiting_for_task_number)
async def process_task_number(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        task_number = int(message.text) - 1
        if task_number < 0 or task_number >= len(user_tasks[user_id]):
            raise ValueError
        removed_task = user_tasks[user_id].pop(task_number)
        await message.reply(f"–ó–∞–¥–∞—á–∞ '{removed_task}' —É–¥–∞–ª–µ–Ω–∞!")
        await state.clear()
    except (ValueError, IndexError):
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    dp.update.middleware(LoggingMiddleware())
    dp.message.register(start_command, Command("start"))
    dp.message.register(list_command, Command("list"))
    dp.message.register(add_command, Command("add"))
    dp.message.register(delete_command, Command("delete"))
    dp.message.register(process_task_text, TaskStates.waiting_for_task)
    dp.message.register(process_task_number, TaskStates.waiting_for_task_number)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())